/*
* Autogenerated by rules_parser.py
*
* DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*
*/

#include "IObjectDrawer.h"
#include "S100RulesParser/private/S101Primitives.h"
#include <cstring>
#include <sstream>
#include <cmath>
#include <iomanip>

#ifdef _MSC_VER
                                                                                                                        #pragma warning(push)
#pragma warning(disable:4127)
#endif

void DrawAdministrationArea(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                double dashes[2] = {2.000000, 3.000000};
                int symbols[1] = {131};
                double symbols_position[1] = {3.500000};
                double symbol_offset[2] = {-0.160000, -0.160000};
                ComplexlLineParam param_complex_line = {0.640000, 118, 140, 151, 5.100000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(6, 36050, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawAirportAirfield(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {191, 191, 143, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolFillAreaParam param_symbol_fill = {7, 38.240000, 0.000000, 18.240000, 38.040000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(6, 22220, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32240)) {
                SymbolFillAreaParam param_symbol_fill = {7, 38.240000, 0.000000, 18.240000, 38.040000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(6, 32240, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32240)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 32240, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32240)) {
                SymbolParam param_symbol = {6, -4.14, -4.14};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32240, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawAnchorBerth(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {2, -2.7, -2.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorBerth";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 26220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {2, -2.7, -2.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorBerth";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 26220, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawAnchorageArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorageArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, -7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 26220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfAnchorage", 8))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorageArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, -7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26220, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {1, -6.45, -7.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorageArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, -7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26220, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfAnchorage", 8))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorageArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, -7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 128, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.070000, -2.600000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 26220, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {1, -6.45, -7.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                std::string text;
                text = "AnchorageArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, -7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 26220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 128, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.070000, -2.600000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 26220, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26220)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawArchipelagicSeaLaneAxis(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26260)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 26260, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawArchipelagicSeaLane(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26260)) {
                double dashes[2] = {2.000000, 6.000000};
                int symbols[1] = {132};
                double symbols_position[1] = {5.000000};
                double symbol_offset[2] = {-1.650000, 0.000000};
                ComplexlLineParam param_complex_line = {0.320000, 203, 169, 250, 8.000000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(15, 26260, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBeaconCardinal(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("beaconShape", 5)) || (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {25, -1.57, -4.83};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {26, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {20, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {14, -1.66, -4.62};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {8, -2.16, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {9, -2.16, -3.46};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {10, -2.16, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {11, -2.16, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {12, -1.19, -2.34};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconCardinal";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBeaconIsolatedDanger(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("beaconShape", 5)) || (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {25, -1.57, -4.83};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {26, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {20, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {14, -1.66, -4.62};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {15, -1.28, -2.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconIsolatedDanger";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBeaconLateral(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("beaconShape", 2)) && (feature.CheckAttr("categoryOfLateralMark", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {261, -1.41, -4.51};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 2)) && (feature.CheckAttr("categoryOfLateralMark", 2)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {262, -1.57, -4.6};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 5)) || (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {70, -2.72, -4.72};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {25, -1.57, -4.83};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {26, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {20, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {69, -2.56, -4.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {14, -1.66, -4.62};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (1 && 1 && 1 && ((feature.CheckAttr("beaconShape", 1)) ||
                                                       (feature.CheckAttr("beaconShape", 2)) ||
                                                       (feature.CheckAttr("beaconShape", 7))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {18, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (1 && 1 && 1 && ((feature.CheckAttr("beaconShape", 3)) ||
                                                              (feature.CheckAttr("beaconShape", 4)) ||
                                                              (feature.CheckAttr("beaconShape", 5))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {16, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (1 && 1 && 1 && ((feature.CheckAttr("beaconShape", 1)) ||
                                                              (feature.CheckAttr("beaconShape", 2)) ||
                                                              (feature.CheckAttr("beaconShape", 7))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {19, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (1 && 1 && 1 && ((feature.CheckAttr("beaconShape", 3)) ||
                                                              (feature.CheckAttr("beaconShape", 4)) ||
                                                              (feature.CheckAttr("beaconShape", 5))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {17, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("colour", 3)) &&
                                              ((feature.CheckAttr("beaconShape", 1)) ||
                                               (feature.CheckAttr("beaconShape", 2)) ||
                                               (feature.CheckAttr("beaconShape", 7))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {18, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("colour", 4)) &&
                                              ((feature.CheckAttr("beaconShape", 1)) ||
                                               (feature.CheckAttr("beaconShape", 2)) ||
                                               (feature.CheckAttr("beaconShape", 7))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {19, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("colour", 4)) &&
                                              ((feature.CheckAttr("beaconShape", 3)) ||
                                               (feature.CheckAttr("beaconShape", 4)) ||
                                               (feature.CheckAttr("beaconShape", 5))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {17, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("colour", 3)) &&
                                              ((feature.CheckAttr("beaconShape", 4)) ||
                                               (feature.CheckAttr("beaconShape", 5))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {16, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && 1 && 1 && 1) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {16, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && 1 && 1 && 1) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {17, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {70, -2.72, -4.72};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("colour", 3)) && (feature.CheckAttr("beaconShape", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {16, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {69, -2.56, -4.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("colour", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {16, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("colour", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {17, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {12, -1.19, -2.34};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconLateral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBeaconSafeWater(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("beaconShape", 5)) || (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {25, -1.57, -4.83};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {26, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {20, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {14, -1.66, -4.62};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("beaconShape", 1)) || (feature.CheckAttr("beaconShape", 2)) ||
                                       (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {22, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 3)) || (feature.CheckAttr("beaconShape", 4)) ||
                    (feature.CheckAttr("beaconShape", 5)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {21, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {21, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSafeWater";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBeaconSpecialPurposeGeneral(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("beaconShape", 5)) || (feature.CheckAttr("beaconShape", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {70, -2.72, -4.72};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {25, -1.57, -4.83};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {26, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {20, -2.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {69, -2.56, -4.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 18))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {246, -1.82, -4.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 44))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {13, -1.82, -4.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {14, -1.66, -4.62};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR32";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR85";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR36";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR28";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR27";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR25";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR26";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 15)) {
                symbol = "TOPMAR88";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 16)) {
                symbol = "TOPMAR87";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 17)) {
                symbol = "TMARDEF1";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR33";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR34";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR24";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR30";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR89";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR22";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR86";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR30";
            } else {
                symbol = "TMARDEF1";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("beaconShape", 3)) || (feature.CheckAttr("beaconShape", 4)) ||
                                       (feature.CheckAttr("beaconShape", 5)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {23, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("beaconShape", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {70, -2.72, -4.72};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("beaconShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {69, -2.56, -4.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 18))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {246, -1.82, -4.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 44))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {23, -1.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                SymbolParam param_symbol = {24, -0.82, -2.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27020)) {
                std::string text;
                text = "BeaconSpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27020, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBerth(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 32440, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {59, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 32440, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {59, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 32440, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                std::string text;
                text = "Berth";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 32440, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {59, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 32440, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                std::string text;
                text = "Berth";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 32440, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBridge(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            ((feature.CheckAttr("categoryOfBridge", 2)) || (feature.CheckAttr("categoryOfBridge", 3)) ||
             (feature.CheckAttr("categoryOfBridge", 4)) || (feature.CheckAttr("categoryOfBridge", 5)) ||
             (feature.CheckAttr("categoryOfBridge", 7)) || (feature.CheckAttr("categoryOfBridge", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.600000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {58, -2.16, -2.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.600000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfBridge", 2)) || (feature.CheckAttr("categoryOfBridge", 3)) ||
             (feature.CheckAttr("categoryOfBridge", 4)) || (feature.CheckAttr("categoryOfBridge", 5)) ||
             (feature.CheckAttr("categoryOfBridge", 7)) || (feature.CheckAttr("categoryOfBridge", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {58, -2.16, -2.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("verticalClearanceValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "clr cl " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("verticalClearanceValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "clr op " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                text = "Bridge";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("verticalClearanceValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "clr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuilding(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("function", 33)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                std::string text;
                text = "Building";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 22220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("function", 33))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                std::string text;
                text = "Building";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (((feature.CheckAttr("function", 22)) || (feature.CheckAttr("function", 23)) ||
                                        (feature.CheckAttr("function", 24)) || (feature.CheckAttr("function", 25))) &&
                                       (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {65, -3.2, -1.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   (((feature.CheckAttr("function", 20)) || (feature.CheckAttr("function", 21))) &&
                    (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {64, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 22)) || (feature.CheckAttr("function", 23)) ||
                    (feature.CheckAttr("function", 24)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {62, -3.04, -1.63};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   (((feature.CheckAttr("function", 26)) || (feature.CheckAttr("function", 27))) &&
                    (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {66, -2.15, -3.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 33)) && (feature.CheckAttr("visuallyConspicuous", 1)) &&
                    (feature.CheckAttrExists("name") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                std::string text;
                text = "Building";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 22220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 20)) || (feature.CheckAttr("function", 21)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {61, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 26)) || (feature.CheckAttr("function", 27)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {63, -2.01, -3.84};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 33)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 33)) && (feature.CheckAttrExists("name") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                std::string text;
                text = "Building";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("function", 35)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {508, -1.74, -1.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {68, -1.64, -1.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("function", 25))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {62, -3.04, -1.63};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("function", 33))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("function", 35))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {507, -1.58, -1.57};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {67, -1.48, -1.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuiltUpArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22240)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 22240, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22240)) {
                std::string text;
                text = "BuiltUpArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 22240, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22240)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 22240, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22240)) {
                SymbolParam param_symbol = {60, -2.72, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 22240, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22240)) {
                std::string text;
                text = "BuiltUpArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 22240, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoyCardinal(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 5)) || (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {54, -1.79, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {34, -3.2, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {29, -3.2, -3.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {49, -3.1, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {47, -3.39, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {28, -3.87, -4.22};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {36, -2.82, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {30, -2.82, -3.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {31, -1.96, -3.46};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {32, -1.36, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfCardinalMark", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {33, -3.21, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {35, -2.19, -2.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyCardinal";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoyInstallation(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {37, -4.61, -4.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyInstallation";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {46, -4.12, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyInstallation";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoyIsolatedDanger(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 5)) || (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {54, -1.79, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {34, -3.2, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {29, -3.2, -3.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {49, -3.1, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {47, -3.39, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {28, -3.87, -4.22};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {36, -2.82, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {38, -2.04, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyIsolatedDanger";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoyLateral(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 5)) || (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {54, -1.79, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {34, -3.2, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {29, -3.2, -3.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {49, -3.1, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {47, -3.39, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {28, -3.87, -4.22};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {36, -2.82, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 1)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {40, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 1)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {39, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 2)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {42, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 2)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {41, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfLateralMark", 3)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {42, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfLateralMark", 3)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {41, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfLateralMark", 4)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {40, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfLateralMark", 4)) && 1 && 1 && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {39, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("buoyShape", 1)) && (feature.CheckAttr("colour", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {40, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("buoyShape", 1)) && (feature.CheckAttr("colour", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {39, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("buoyShape", 2)) && (feature.CheckAttr("colour", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {42, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("buoyShape", 2)) && (feature.CheckAttr("colour", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {41, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLateralMark", 1)) && (feature.CheckAttr("colour", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {42, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLateralMark", 1)) && (feature.CheckAttr("colour", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {41, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLateralMark", 2)) && (feature.CheckAttr("colour", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {40, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLateralMark", 2)) && (feature.CheckAttr("colour", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {39, -3.25, -3.13};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {35, -2.19, -2.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoyLateral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoySafeWater(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 5)) || (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {54, -1.79, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {49, -3.1, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {47, -3.39, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {28, -3.87, -4.22};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {36, -2.82, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {48, -2.19, -2.19};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySafeWater";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawBuoySpecialPurposeGeneral(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 5)) || (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {54, -1.79, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {34, -3.2, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {29, -3.2, -3.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {49, -3.1, -4.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {47, -3.39, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {28, -3.87, -4.22};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 15))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {57, -4.64, -6.04};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSpecialPurposeMark", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {55, -4.61, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -7.020000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("topmarkDaymarkShape", 24))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {103, -2.64, -6.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("topmarkDaymarkShape", 25))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {104, -2.67, -6.02};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {36, -2.82, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {100, -2.14, -6.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("buoyShape", 4)) || (feature.CheckAttr("buoyShape", 5)) ||
                                       (feature.CheckAttr("buoyShape", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {53, -1.85, -2.55};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfSpecialPurposeMark", 54)) &&
                                              ((feature.CheckAttr("buoyShape", 4)) ||
                                               (feature.CheckAttr("buoyShape", 5))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {53, -1.85, -2.55};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSpecialPurposeMark", 19)) && (feature.CheckAttr("buoyShape", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {51, -3.05, -3.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSpecialPurposeMark", 19)) && (feature.CheckAttr("buoyShape", 2)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {52, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSpecialPurposeMark", 54)) && (feature.CheckAttr("buoyShape", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {51, -3.05, -3.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSpecialPurposeMark", 54)) && (feature.CheckAttr("buoyShape", 2)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {52, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfSpecialPurposeMark", 9)) ||
                                              (feature.CheckAttr("categoryOfSpecialPurposeMark", 15)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {56, -4.16, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {51, -3.05, -3.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {52, -2.91, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("buoyShape", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {56, -4.16, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("topmarkDaymarkShape", 24))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {101, -2.65, -4.17};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("topmarkDaymarkShape", 25))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {102, -2.66, -4.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {50, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                SymbolParam param_symbol = {99, -2.2, -4.15};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27025, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27025)) {
                std::string text;
                text = "BuoySpecialPurposeGeneral";
                text = "bn " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27025, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCableArea(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {71, -2.19, -6.14};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34030, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {71, -2.19, -6.14};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 135, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -1.330000, -2.180000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 34030, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCableOverhead(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && ((feature.CheckAttrExists("radarConspicuous") > 0) && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && ((feature.CheckAttrExists("radarConspicuous") > 0) &&
                                              (feature.CheckAttrExists("verticalUncertainty") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("radarConspicuous") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && 1) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("verticalUncertainty") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCableSubmarine(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfCable", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 24010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34070)) {
                double dashes[4] = {0.600000, 2.000000, 23.800000, 2.000000};
                int symbols[3] = {136, 135, 136};
                double symbols_position[3] = {7.700000, 13.800000, 19.500000};
                double symbol_offset[6] = {-3.200000, -1.180000, -1.330000, -2.180000, -3.200000, -1.180000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 30.900000, 0.000000, dashes, 4, symbols,
                                                        symbols_position, 3, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 34070, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCanal(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("condition") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCargoTranshipmentArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26250)) {
                SymbolParam param_symbol = {79, -2.51, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26250, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26250)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26250, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26250)) {
                SimpleLineParam param_simple_line = {0.320000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26250, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26250)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26250, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26250)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 26250, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCauseway(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.960000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("waterLevelEffect", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                ColourFillAreaParam param_color_fill = {88, 175, 156, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(15, 22010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 22010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(15, 22010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCautionArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {78, -2.72, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26150)) {
                SymbolParam param_symbol = {89, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26150, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26150)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26150, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26150)) {
                SymbolParam param_symbol = {89, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26150, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26150)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 140, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.700000, -2.040000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 26150, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCheckpoint(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {257, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {84, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCoastguardStation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38030)) {
                SymbolParam param_symbol = {72, -0.45, -4.52};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 38030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCoastline(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            ((feature.CheckAttr("categoryOfCoastline", 6)) || (feature.CheckAttr("categoryOfCoastline", 7)) ||
             (feature.CheckAttr("categoryOfCoastline", 8)) || (feature.CheckAttr("categoryOfCoastline", 10)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!strcmp("Coastline", "Coastline") && feature.CheckAttr("radarConspicuous", 1)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.960000, 203, 169, 250, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawContiguousZone(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawContinentalShelfArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36010)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawConveyor(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            ((feature.CheckAttr("categoryOfConveyor", 1)) && (feature.CheckAttrExists("radarConspicuous") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfConveyor", 2)) &&
                                              (feature.CheckAttrExists("radarConspicuous") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfConveyor", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("radarConspicuous") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("radarConspicuous") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("verticalClearanceValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "clr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("verticalClearanceValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "clr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 12210, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCrane(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32440, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32440, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {88, -2.66, -4.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32440, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCurrentNonGravitational(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                double dashes[2] = {0.000000, 9.000000};
                int symbols[3] = {141, 141, 141};
                double symbols_position[3] = {2.500000, 4.000000, 9.000000};
                double symbol_offset[6] = {-2.660000, -1.160000, -2.660000, -1.160000, -2.660000, -1.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 12.000000, 0.000000, dashes, 2,
                                                        symbols, symbols_position, 3, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 33060, param, idDrawComplexlLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && ((feature.CheckAttrExists("orientationValue") > 0) && 1)) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {93, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {93, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 33060, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {92, -5.04, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 33060, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawCustomZone(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36020, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDam(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfDam", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {1.280000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfDam", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(18, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 22010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfDam", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SymbolParam param_symbol = {78, -2.72, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDataCoverage(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDeepWaterRoutePart(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {552, -3.16, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.960000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {125, -3.22, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.960000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {549, -6.19, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.960000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {552, -3.16, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 146, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -3.310000, -1.120000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {125, -3.22, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 146, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -3.310000, -1.120000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {549, -6.19, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {124, -7.58, -17.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 146, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -3.310000, -1.120000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDepthArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
        }
        if (!strcmp(temp, "Surface") && ((!feature.CheckAttrExists("depthRangeMinimumValue")) &&
                                         (!feature.CheckAttrExists("depthRangeMaximumValue")))) {
            if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                SymbolFillAreaParam param_symbol_fill = {263, 13.020000, 0.000000, 3.020000, 11.010000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(3, 13030, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 13030, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            double drval1;
            double depthRangeMinimumValue = 0.0;
            feature.GetRealAttrByID("depthRangeMinimumValue", &depthRangeMinimumValue);
            if (depthRangeMinimumValue) {
                drval1 = depthRangeMinimumValue;
            } else {
                drval1 = -1;
            }
            double drval2;
            double depthRangeMaximumValue = 0.0;
            feature.GetRealAttrByID("depthRangeMaximumValue", &depthRangeMaximumValue);
            if (depthRangeMaximumValue) {
                drval2 = depthRangeMaximumValue;
            } else {
                drval2 = drval1 + 0.01;
            }
            if (drval1 >= object_drawer->GetContext().GetSafetyContour() &&
                drval2 > object_drawer->GetContext().GetSafetyContour()) {
                if (!object_drawer->GetContext().GetFourShades() == true ||
                    (drval1 >= object_drawer->GetContext().GetDeepContour() &&
                     drval2 > object_drawer->GetContext().GetDeepContour())) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {201, 237, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {167, 218, 252, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                }
            } else {
                if (!object_drawer->GetContext().GetFourShades() != true &&
                    drval1 >= object_drawer->GetContext().GetShallowContour() &&
                    drval2 > object_drawer->GetContext().GetShallowContour()) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {130, 202, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else if (drval1 >= 0 && drval2 > 0) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {88, 175, 156, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                }
                if (object_drawer->GetContext().GetShallowPattern() == true) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        SymbolFillAreaParam param_symbol_fill = {105, 22.500000, 0.000000, 0.000000, 43.130000};
                        param.m_SymbolFillAreaParam = param_symbol_fill;
                        object_drawer->AddFunction(3, 13030, param, idSymbolFillArea, index_feature);
                    }
                }
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDepthContour(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (feature.CheckAttr("valueOfDepthContour", object_drawer->GetContext().GetSafetyContour())) {
                if (!object_drawer->GetContext().CheckViewingGroup(33020)) {
                    SimpleLineParam param_simple_line = {0.960000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(15, 33020, param, idDrawSimpleLine, index_feature);
                }
            } else {
                if (!object_drawer->GetContext().CheckViewingGroup(33020)) {
                    SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(15, 33020, param, idDrawSimpleLine, index_feature);
                }
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDistanceMark(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfDistanceMark", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27030)) {
                SymbolParam param_symbol = {110, -1.91, -2.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27030)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("text", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27030, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27030)) {
                SymbolParam param_symbol = {109, -5.06, -2.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 27030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27030)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("text", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 27030, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDockArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("condition") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                std::string text;
                text = "DockArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(6, 12420, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                std::string text;
                text = "DockArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(6, 12420, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDredgedArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            double drval1;
            double depthRangeMinimumValue = 0.0;
            feature.GetRealAttrByID("depthRangeMinimumValue", &depthRangeMinimumValue);
            if (depthRangeMinimumValue) {
                drval1 = depthRangeMinimumValue;
            } else {
                drval1 = -1;
            }
            double drval2;
            double depthRangeMaximumValue = 0.0;
            feature.GetRealAttrByID("depthRangeMaximumValue", &depthRangeMaximumValue);
            if (depthRangeMaximumValue) {
                drval2 = depthRangeMaximumValue;
            } else {
                drval2 = drval1 + 0.01;
            }
            if (drval1 >= object_drawer->GetContext().GetSafetyContour() &&
                drval2 > object_drawer->GetContext().GetSafetyContour()) {
                if (!object_drawer->GetContext().GetFourShades() == true ||
                    (drval1 >= object_drawer->GetContext().GetDeepContour() &&
                     drval2 > object_drawer->GetContext().GetDeepContour())) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {201, 237, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {167, 218, 252, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                }
            } else {
                if (!object_drawer->GetContext().GetFourShades() != true &&
                    drval1 >= object_drawer->GetContext().GetShallowContour() &&
                    drval2 > object_drawer->GetContext().GetShallowContour()) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {130, 202, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else if (drval1 >= 0 && drval2 > 0) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                } else {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        ColourFillAreaParam param_color_fill = {88, 175, 156, 255};
                        param.m_ColourFillAreaParam = param_color_fill;
                        object_drawer->AddFunction(3, 13030, param, idColourFillArea, index_feature);
                    }
                }
                if (object_drawer->GetContext().GetShallowPattern() == true) {
                    if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                        SymbolFillAreaParam param_symbol_fill = {105, 22.500000, 0.000000, 0.000000, 43.130000};
                        param.m_SymbolFillAreaParam = param_symbol_fill;
                        object_drawer->AddFunction(3, 13030, param, idSymbolFillArea, index_feature);
                    }
                }
            }
            if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                SymbolFillAreaParam param_symbol_fill = {121, 3.500000, 0.000000, 0.000000, 3.500000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(3, 13030, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(13030)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 13030, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDryDock(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                ColourFillAreaParam param_color_fill = {191, 191, 143, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32440, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32440, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawDyke(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("radarConspicuous") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(22210)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.960000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 22010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawExclusiveEconomicZone(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFairway(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {182, -3.16, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26050, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {183, -3.18, -7.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26050, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26050, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {182, -3.16, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26050, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {183, -3.18, -7.67};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26050, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                std::string text;
                text = "Fairway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 7.020000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 26050, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26050, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFenceWall(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFerryRoute(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfFerry", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                double dashes[6] = {14.200000, 2.900000, 5.100000, -3.100000, 19.100000, 2.900000};
                int symbols[1] = {150};
                double symbols_position[1] = {9.600000};
                double symbol_offset[2] = {-2.630000, -0.950000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 22.000000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25030, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                double dashes[6] = {14.200000, 2.900000, 5.100000, -3.100000, 19.100000, 2.900000};
                int symbols[1] = {151};
                double symbols_position[1] = {9.600000};
                double symbol_offset[2] = {-2.630000, -0.950000};
                ComplexlLineParam param_complex_line = {0.320000, 76, 91, 99, 22.000000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25030, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfFerry", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SymbolParam param_symbol = {195, -11.34, -1.51};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 25030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 25030, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SymbolParam param_symbol = {194, -11.34, -1.51};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 25030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 25030, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfFerry", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SymbolParam param_symbol = {195, -11.34, -1.51};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 25030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 25030, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                SymbolParam param_symbol = {194, -11.34, -1.51};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 25030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25030)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 25030, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFisheryZone(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36040)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36040, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFishingFacility(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfFishingFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                double dashes[2] = {0.400000, 2.000000};
                int symbols[1] = {152};
                double symbols_position[1] = {2.400000};
                double symbol_offset[2] = {-0.160000, -1.690000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 2.400000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26210, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfFishingFacility", 2)) ||
                                       (feature.CheckAttr("categoryOfFishingFacility", 3)) ||
                                       (feature.CheckAttr("categoryOfFishingFacility", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {196, -2.96, -2.31};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfFishingFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {197, -3.18, -0.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {201, -6.57, -3.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfFishingFacility", 2)) ||
                                         (feature.CheckAttr("categoryOfFishingFacility", 3)) ||
                                         (feature.CheckAttr("categoryOfFishingFacility", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolFillAreaParam param_symbol_fill = {199, 32.610000, 0.000000, 12.610000, 26.650000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 26210, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfFishingFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolFillAreaParam param_symbol_fill = {198, 35.080000, 0.000000, 15.080000, 21.560000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 26210, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolFillAreaParam param_symbol_fill = {202, 34.900000, 0.000000, 14.900000, 23.200000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 26210, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26210, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfFishingFacility", 2)) ||
                                         (feature.CheckAttr("categoryOfFishingFacility", 3)) ||
                                         (feature.CheckAttr("categoryOfFishingFacility", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {196, -2.96, -2.31};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26210, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfFishingFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {197, -3.18, -0.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26210, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {196, -2.96, -2.31};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26210, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFishingGround(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {200, -7.07, -2.76};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26210, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFloatingDock(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.960000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFogSignal(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27080)) {
                SymbolParam param_symbol = {189, -5.17, -0.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 27080, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFortifiedStructure(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.960000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {191, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {190, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFoulGround(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SimpleLineParam param_simple_line = {2.000000, 76, 91, 99, 1.800000, 0.000000, 0.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34050, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SimpleLineParam param_simple_line = {1.000000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34051, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SimpleLineParam param_simple_line = {1.000000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34051, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34050, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawFreePortArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36020)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36020, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawGate(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfGate", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12410, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {207, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfGate", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12410, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {206, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(24, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfGate", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {207, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 32440, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfGate", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {206, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 32440, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SymbolParam param_symbol = {207, -3.66, -3.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 22010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawGridiron(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27060)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 27060, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawHarbourAreaAdministrative(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36020)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36020, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(6, 36020, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawHarbourFacility(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfHarbourFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {289, -3.83, -1.58};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfHarbourFacility", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {210, -3.13, -3.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfHarbourFacility", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {369, -3.56, -3.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {79, -2.51, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfHarbourFacility", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {210, -3.13, -3.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfHarbourFacility", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {369, -3.56, -3.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfHarbourFacility", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {289, -3.83, -1.58};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32410)) {
                SymbolParam param_symbol = {79, -2.51, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawHulk(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {211, -2.86, -1.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 12410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawIceArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {147, 174, 187, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolFillAreaParam param_symbol_fill = {212, 15.650000, 0.000000, 0.000000, 14.350000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 12410, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawInshoreTrafficZone(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {217, -5.28, -4.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 25010, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {217, -5.28, -4.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[2] = {2.000000, 3.000000};
                int symbols[1] = {175};
                double symbols_position[1] = {3.500000};
                double symbol_offset[2] = {-0.320000, -0.320000};
                ComplexlLineParam param_complex_line = {0.640000, 192, 69, 209, 5.100000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(15, 25010, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLake(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 22010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22010)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 22010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLandArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!strcmp("LandArea", "Coastline") && feature.CheckAttr("radarConspicuous", 1)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                    SimpleLineParam param_simple_line = {0.960000, 203, 169, 250, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(24, 12010, param, idDrawSimpleLine, index_feature);
                }
                if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(24, 12010, param, idDrawSimpleLine, index_feature);
                }
            } else {
                if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(24, 12010, param, idDrawSimpleLine, index_feature);
                }
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                ColourFillAreaParam param_color_fill = {191, 191, 143, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 12010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                std::string text;
                text = "LandArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(3, 12010, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                SymbolParam param_symbol = {228, -1.35, -1.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 12010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12010)) {
                std::string text;
                text = "LandArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 12010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLandElevation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SymbolParam param_symbol = {257, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("elevation", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = text + " m";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLandRegion(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfLandRegion", 12)) || (feature.CheckAttr("categoryOfLandRegion", 2)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                SymbolFillAreaParam param_symbol_fill = {236, 19.000000, 0.000000, 4.000000, 20.170000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 21060, param, idSymbolFillArea, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                std::string text;
                text = "LandRegion";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 21060, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                SymbolParam param_symbol = {257, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 21060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                std::string text;
                text = "LandRegion";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 21060, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLandmark(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 33)) &&
             (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 22220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 33)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32220, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            (((feature.CheckAttr("categoryOfLandmark", 15)) || (feature.CheckAttr("categoryOfLandmark", 17)) ||
              (feature.CheckAttr("categoryOfLandmark", 20))) &&
             ((feature.CheckAttr("function", 20)) || (feature.CheckAttr("function", 21))) &&
             (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {64, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   (((feature.CheckAttr("categoryOfLandmark", 10)) || (feature.CheckAttr("categoryOfLandmark", 12)) ||
                     (feature.CheckAttr("categoryOfLandmark", 13))) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {238, -2.13, -3.71};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   (((feature.CheckAttr("categoryOfLandmark", 15)) || (feature.CheckAttr("categoryOfLandmark", 17)) ||
                     (feature.CheckAttr("categoryOfLandmark", 20))) && (feature.CheckAttr("function", 20)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {61, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfLandmark", 20)) &&
                                              ((feature.CheckAttr("function", 26)) ||
                                               (feature.CheckAttr("function", 27))) &&
                                              (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {66, -2.15, -3.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 9)) || (feature.CheckAttr("categoryOfLandmark", 10)) ||
                    (feature.CheckAttr("categoryOfLandmark", 12)) || (feature.CheckAttr("categoryOfLandmark", 13)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {237, -2.13, -3.71};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 31)) &&
                    (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {546, -1.66, -7.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 22220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 33)) &&
                    (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {543, -1.91, -5.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 22220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   (((feature.CheckAttr("categoryOfLandmark", 8)) || (feature.CheckAttr("categoryOfLandmark", 20))) &&
                    (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 1)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {70, -2.72, -4.72};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 15)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {113, -2.64, -3.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 16)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {272, -2.23, -5.08};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {543, -1.91, -5.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 31)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {544, -1.66, -7.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 17)) && (feature.CheckAttr("function", 33)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {541, -1.89, -5.94};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                std::string text;
                text = "Landmark";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 32220, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 18)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {568, -1.82, -3.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 19)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {564, -1.66, -6.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 3)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {77, -1.91, -6.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 4)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {123, -1.82, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 5)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {187, -1.66, -4.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {185, -1.66, -5.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 7)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {242, -1.66, -6.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfLandmark", 9)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {238, -2.13, -3.71};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {69, -2.56, -4.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 15))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {112, -2.65, -3.96};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 16))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {271, -2.18, -5.1};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 17))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {541, -1.89, -5.94};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 18))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {567, -1.66, -3.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 20))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {255, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {76, -1.91, -6.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {122, -1.82, -5.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {187, -1.66, -4.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {184, -1.66, -5.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {241, -1.66, -6.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 8))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SymbolParam param_symbol = {257, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32250, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {255, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 19))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {563, -1.66, -6.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfLandmark", 19))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {564, -1.66, -6.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLightFloat(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {224, -4.82, -2.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "LightFloat";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
            std::string symbol;
            if (feature.CheckAttr("topmarkDaymarkShape", 1)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 2)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 3)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 4)) {
                symbol = "TOPMAR12";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 5)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 6)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 7)) {
                symbol = "TOPMAR65";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 8)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 9)) {
                symbol = "TOPMAR16";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 10)) {
                symbol = "TOPMAR08";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 11)) {
                symbol = "TOPMAR07";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 12)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 13)) {
                symbol = "TOPMAR05";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 14)) {
                symbol = "TOPMAR06";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 18)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 19)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 20)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 21)) {
                symbol = "TOPMAR13";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 22)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 23)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 24)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 25)) {
                symbol = "TOPMAR04";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 26)) {
                symbol = "TOPMAR10";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 27)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 28)) {
                symbol = "TOPMAR18";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 29)) {
                symbol = "TOPMAR02";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 30)) {
                symbol = "TOPMAR17";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 31)) {
                symbol = "TOPMAR14";
            } else if (feature.CheckAttr("topmarkDaymarkShape", 32)) {
                symbol = "TOPMAR10";
            } else {
                symbol = "TMARDEF2";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[symbol].NumSymbol,
                                            S101Symbols::Symbols()[symbol].OffsetX,
                                            S101Symbols::Symbols()[symbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {225, -3.23, -1.28};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                std::string text;
                text = "LightFloat";
                text = "by " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLightSectored(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLightVessel(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27011)) {
                SymbolParam param_symbol = {226, -4.82, -6.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27011, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27011)) {
                std::string text;
                text = "LightVessel";
                text = "LtV " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27011, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27011)) {
                SymbolParam param_symbol = {227, -3.88, -1.98};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27011, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27011)) {
                std::string text;
                text = "LightVessel";
                text = "LtV " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, -3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(24, 27011, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLocalDirectionOfBuoyage(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27040)) {
                SymbolParam param_symbol = {106, -6.66, -30.59};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 27040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27040)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 27040, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(27040)) {
                SymbolParam param_symbol = {106, -6.66, -30.59};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 27040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(27040)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 27040, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLocalMagneticAnomaly(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SimpleLineParam param_simple_line = {0.320000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 31080, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {229, -1.3, -4.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {229, -1.3, -4.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {230, -3.02, -0.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 31080, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {230, -3.02, -0.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 31080, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLockBasin(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawLogPond(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 12410, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawMagneticVariation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 31080, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {233, -2.85, -37.06};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {233, -2.85, -37.06};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                SymbolParam param_symbol = {232, -1.24, -4.63};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 31080, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(31080)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("valueOfMagneticVariation", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 31080, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawMarineFarmCulture(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {234, -3.69, -2.18};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolFillAreaParam param_symbol_fill = {235, 39.930000, 0.000000, 19.930000, 26.020000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 26210, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 26210, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolFillAreaParam param_symbol_fill = {235, 39.930000, 0.000000, 19.930000, 26.020000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 26210, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 26210, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26210)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 26210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawMilitaryPracticeArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {78, -2.72, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26040, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26040, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawMooringWarpingFacility(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfMooringWarpingFacility", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(14010)) {
                SimpleLineParam param_simple_line = {0.320000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 14010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(18, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfMooringWarpingFacility", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {240, -1.96, -5.19};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 12410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfMooringWarpingFacility", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32440)) {
                SymbolParam param_symbol = {254, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 32440, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfMooringWarpingFacility", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {254, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 12410, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfMooringWarpingFacility", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {46, -4.12, -2.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {239, -1.76, -1.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 12410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSimplifiedPoints()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfMooringWarpingFacility", 7)) && (feature.CheckAttr("buoyShape", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {44, -3.77, -5.52};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfMooringWarpingFacility", 7)) &&
                                              (feature.CheckAttr("buoyShape", 6)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(27010)) {
                SymbolParam param_symbol = {45, -3.17, -5.23};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 27010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawNavigationLine(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfNavigationLine", 1)) ||
                                       (feature.CheckAttr("categoryOfNavigationLine", 2)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawNavigationalSystemOfMarks(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27040)) {
                double dashes[8] = {2.000000, 3.000000, 10.000000, 3.000000, 15.200000, 3.000000, 22.500000, 3.000000};
                int symbols[2] = {159, 160};
                double symbols_position[2] = {7.310000, 20.440000};
                double symbol_offset[4] = {-1.160000, -1.760000, -0.900000, -1.720000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 25.500000, 0.000000, dashes, 8,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 27040, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawObstruction(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            ((feature.CheckAttr("categoryOfObstruction", 10)) || (feature.CheckAttr("categoryOfObstruction", 8)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("categoryOfObstruction", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("waterLevelEffect", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfObstruction", 8)) || (feature.CheckAttr("categoryOfObstruction", 10)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 12410, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfObstruction", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 12410, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("waterLevelEffect", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 12410, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            (((feature.CheckAttr("categoryOfObstruction", 8)) || (feature.CheckAttr("categoryOfObstruction", 10))) &&
             (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfObstruction", 7)) &&
                                              (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfObstruction", 8)) ||
                                              (feature.CheckAttr("categoryOfObstruction", 10)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfObstruction", 9)) &&
                                              (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfObstruction", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfObstruction", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {0, -2.22, -2.79};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("waterLevelEffect", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {188, -3.4, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 12410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfObstruction", 7)) && (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34051, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfObstruction", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfObstruction", 7)) && (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34051, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfObstruction", 7))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34050, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
        } else if (!strcmp(temp, "Curve")) {
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
        } else if (!strcmp(temp, "Surface")) {
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
        } else if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawOffshorePlatform(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(15, 12210, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {1.280000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                text = "OffshorePlatform";
                text = "Prod " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 12210, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {251, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 12210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                std::string text;
                text = "OffshorePlatform";
                text = "Prod " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 12210, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawOffshoreProductionArea(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26040, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26040, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawOilBarrier(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPile(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {254, -1.16, -1.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 12410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPilotBoardingPlace(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                SymbolParam param_symbol = {253, -2.75, -2.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 28010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                std::string text;
                text = "PilotBoardingPlace";
                text = "Plt " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 28010, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                SymbolParam param_symbol = {253, -2.75, -2.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 28010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                SimpleLineParam param_simple_line = {0.640000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 28010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                SymbolParam param_symbol = {253, -2.75, -2.85};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 28010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(28010)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 28010, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPipelineOverhead(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttrExists("radarConspicuous") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {269, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPipelineSubmarineOnLand(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            ((feature.CheckAttr("categoryOfPipelinePipe", 2)) || (feature.CheckAttr("categoryOfPipelinePipe", 3)) ||
             (feature.CheckAttr("categoryOfPipelinePipe", 4)) || (feature.CheckAttr("categoryOfPipelinePipe", 5)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34070)) {
                double dashes[2] = {3.600000, 4.000000};
                int symbols[1] = {166};
                double symbols_position[1] = {8.000000};
                double symbol_offset[2] = {-0.740000, -0.730000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.700000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 34070, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("product", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34070)) {
                double dashes[2] = {3.600000, 4.000000};
                int symbols[1] = {166};
                double symbols_position[1] = {8.000000};
                double symbol_offset[2] = {-0.740000, -0.730000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.700000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 34070, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34070)) {
                double dashes[2] = {3.600000, 4.000000};
                int symbols[1] = {165};
                double symbols_position[1] = {7.600000};
                double symbol_offset[2] = {-0.160000, -1.110000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 9.500000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 34070, param, idDrawComplexlLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPontoon(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 12410, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 12410, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPrecautionaryArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {258, -1.93, -3.09};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {259, -5.44, -0.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolFillAreaParam param_symbol_fill = {551, 5.000000, 0.000000, 0.000000, 5.000000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 25010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {259, -5.44, -0.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 167, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -1.920000, -2.550000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawProductionStorageArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfProductionArea", 5)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {288, -3.64, -3.9};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfProductionArea", 8)) &&
                                                (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {510, -4.24, -4.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfProductionArea", 9)) &&
                                                (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {566, -4.19, -4.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfProductionArea", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {266, -3.68, -4.24};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfProductionArea", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {287, -3.57, -3.69};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfProductionArea", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {506, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfProductionArea", 8))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {509, -4.06, -4.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfProductionArea", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {565, -4.05, -4.06};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32270, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfProductionArea", 5)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {185, -1.66, -5.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfProductionArea", 8)) &&
                                              (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {508, -1.74, -1.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfProductionArea", 9)) &&
                                              (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {564, -1.66, -6.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfProductionArea", 5))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {184, -1.66, -5.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfProductionArea", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {506, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfProductionArea", 8))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {507, -1.58, -1.57};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfProductionArea", 9))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {563, -1.66, -6.29};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32270)) {
                SymbolParam param_symbol = {260, -2.87, -3.07};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32270, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawPylonBridgeSupport(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(18, 12210, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 12210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12210)) {
                SymbolParam param_symbol = {256, -2.32, -2.32};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadarLine(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25040)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25040, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadarRange(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25040)) {
                SimpleLineParam param_simple_line = {0.320000, 203, 169, 250, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 25040, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadarReflector(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27230)) {
                SymbolParam param_symbol = {270, -3.2, -3.21};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 27230, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadarStation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfRadarStation", 2))) {
            if (!object_drawer->GetContext().CheckViewingGroup(38010)) {
                SymbolParam param_symbol = {278, -3.13, -3.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 38010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(38010)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("communicationChannel", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "ch " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(15, 38010, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38010)) {
                SymbolParam param_symbol = {255, -2.16, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(15, 38010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadarTransponderBeacon(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(27210)) {
                SymbolParam param_symbol = {293, -3.53, -3.36};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 27210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadioCallingInPoint(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            (((feature.CheckAttr("trafficFlow", 1)) || (feature.CheckAttr("trafficFlow", 2)) ||
              (feature.CheckAttr("trafficFlow", 3))) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25060, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {276, -2.34, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("trafficFlow", 4)) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25060, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {277, -2.34, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25060, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {274, -6.23, -5.33};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            (((feature.CheckAttr("trafficFlow", 1)) || (feature.CheckAttr("trafficFlow", 2)) ||
              (feature.CheckAttr("trafficFlow", 3))) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {276, -2.34, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                std::string text;
                text = "RadioCallingInPoint";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25060, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("communicationChannel", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "ch " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("trafficFlow", 4)) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {277, -2.34, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                std::string text;
                text = "RadioCallingInPoint";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25060, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("communicationChannel", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "ch " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                SymbolParam param_symbol = {274, -6.23, -5.33};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25060)) {
                std::string text;
                text = "RadioCallingInPoint";
                text = "Nr " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25060, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRadioStation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfRadioStation", 10))) {
            if (!object_drawer->GetContext().CheckViewingGroup(38010)) {
                SymbolParam param_symbol = {120, -3.16, -3.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 38010, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38010)) {
                SymbolParam param_symbol = {278, -3.13, -3.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 38010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRailway(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SimpleLineParam param_simple_line = {0.640000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32250, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRapids(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32050)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32050, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32050)) {
                ColourFillAreaParam param_color_fill = {118, 140, 151, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 32050, param, idColourFillArea, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRecommendedRouteCentreline(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                       ((feature.CheckAttr("trafficFlow", 1)) ||
                                        (feature.CheckAttr("trafficFlow", 2)) ||
                                        (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {0.500000, 23.000000};
                int symbols[1] = {172};
                double symbols_position[1] = {11.000000};
                double symbol_offset[2] = {-0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 23.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                              ((feature.CheckAttr("trafficFlow", 1)) ||
                                               (feature.CheckAttr("trafficFlow", 2)) ||
                                               (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[10] = {1.000000, 3.000000, 6.000000, 3.000000, 11.000000, 3.000000, 16.000000, 3.000000,
                                     21.000000, 3.000000};
                int symbols[1] = {172};
                double symbols_position[1] = {11.500000};
                double symbol_offset[2] = {-0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 24.100000, 0.000000, dashes, 10,
                                                        symbols, symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("trafficFlow", 1)) || (feature.CheckAttr("trafficFlow", 2)) ||
                    (feature.CheckAttr("trafficFlow", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[10] = {1.000000, 3.000000, 6.000000, 3.000000, 11.000000, 3.000000, 16.000000, 3.000000,
                                     21.000000, 3.000000};
                int symbols[1] = {172};
                double symbols_position[1] = {11.500000};
                double symbol_offset[2] = {-0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 24.100000, 0.000000, dashes, 10,
                                                        symbols, symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfRecommendedTrack", 1)) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {0.500000, 23.000000};
                int symbols[2] = {171, 172};
                double symbols_position[2] = {5.000000, 11.000000};
                double symbol_offset[4] = {-0.170000, -2.610000, -0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 23.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfRecommendedTrack", 2)) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[10] = {1.000000, 3.000000, 6.000000, 3.000000, 11.000000, 3.000000, 16.000000, 3.000000,
                                     21.000000, 3.000000};
                int symbols[2] = {171, 172};
                double symbols_position[2] = {5.500000, 11.500000};
                double symbol_offset[4] = {-0.170000, -2.610000, -0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 24.100000, 0.000000, dashes, 10,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("trafficFlow", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[10] = {1.000000, 3.000000, 6.000000, 3.000000, 11.000000, 3.000000, 16.000000, 3.000000,
                                     21.000000, 3.000000};
                int symbols[2] = {171, 172};
                double symbols_position[2] = {5.500000, 11.500000};
                double symbol_offset[4] = {-0.170000, -2.610000, -0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 24.100000, 0.000000, dashes, 10,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[8] = {1.000000, 3.500000, 6.500000, 3.000000, 16.500000, 3.000000, 21.500000, 3.500000};
                int symbols[3] = {171, 170, 172};
                double symbols_position[3] = {1.000000, 13.500000, 16.500000};
                double symbol_offset[6] = {-0.170000, -2.610000, -1.190000, -2.340000, -0.280000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 24.600000, 0.000000, dashes, 8, symbols,
                                                        symbols_position, 3, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRecommendedTrack(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                       ((feature.CheckAttr("trafficFlow", 1)) ||
                                        (feature.CheckAttr("trafficFlow", 2)) ||
                                        (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {0.500000, 17.100000};
                int symbols[1] = {174};
                double symbols_position[1] = {11.700000};
                double symbol_offset[2] = {-1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 17.700000, 0.000000, dashes, 2,
                                                        symbols, symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && ((feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                              ((feature.CheckAttr("trafficFlow", 1)) ||
                                               (feature.CheckAttr("trafficFlow", 2)) ||
                                               (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[6] = {2.100000, 3.300000, 7.400000, 3.200000, 16.000000, 3.300000};
                int symbols[1] = {174};
                double symbols_position[1] = {13.300000};
                double symbol_offset[2] = {-1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 19.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("trafficFlow", 1)) || (feature.CheckAttr("trafficFlow", 2)) ||
                    (feature.CheckAttr("trafficFlow", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[6] = {2.100000, 3.300000, 7.400000, 3.200000, 16.000000, 3.300000};
                int symbols[1] = {174};
                double symbols_position[1] = {13.300000};
                double symbol_offset[2] = {-1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 19.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfRecommendedTrack", 1)) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {0.300000, 20.600000};
                int symbols[2] = {173, 174};
                double symbols_position[2] = {6.300000, 11.700000};
                double symbol_offset[4] = {-1.340000, -1.710000, -1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 17.600000, 0.000000, dashes, 2,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfRecommendedTrack", 2)) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[8] = {2.000000, 3.300000, 9.000000, 3.300000, 16.000000, 3.300000, 21.300000, 3.300000};
                int symbols[2] = {173, 174};
                double symbols_position[2] = {7.900000, 13.300000};
                double symbol_offset[4] = {-1.340000, -1.710000, -1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 19.300000, 0.000000, dashes, 8,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") && (feature.CheckAttr("trafficFlow", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[8] = {2.000000, 3.300000, 9.000000, 3.300000, 16.000000, 3.300000, 21.300000, 3.300000};
                int symbols[2] = {173, 174};
                double symbols_position[2] = {7.900000, 13.300000};
                double symbol_offset[4] = {-1.340000, -1.710000, -1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 19.300000, 0.000000, dashes, 8,
                                                        symbols, symbols_position, 2, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[6] = {2.000000, 3.300000, 16.000000, 3.300000, 21.300000, 3.300000};
                int symbols[3] = {173, 169, 174};
                double symbols_position[3] = {7.900000, 10.600000, 13.300000};
                double symbol_offset[6] = {-1.340000, -1.710000, -1.190000, -2.340000, -1.090000, -1.760000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 19.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 3, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         (feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {283, -1.73, -6.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                                ((feature.CheckAttr("trafficFlow", 1)) ||
                                                 (feature.CheckAttr("trafficFlow", 2)) ||
                                                 (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {282, -1.72, -5.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                ((feature.CheckAttr("trafficFlow", 1)) ||
                                                 (feature.CheckAttr("trafficFlow", 2)) ||
                                                 (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {282, -1.72, -5.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                                (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {281, -1.68, -7.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                                (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {280, -1.69, -8.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {280, -1.69, -8.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {279, -8.9, -2.5};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 25020, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         (feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {283, -1.73, -6.37};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                                ((feature.CheckAttr("trafficFlow", 1)) ||
                                                 (feature.CheckAttr("trafficFlow", 2)) ||
                                                 (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {282, -1.72, -5.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                ((feature.CheckAttr("trafficFlow", 1)) ||
                                                 (feature.CheckAttr("trafficFlow", 2)) ||
                                                 (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {282, -1.72, -5.11};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 1)) &&
                                                (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {281, -1.68, -7.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                                (feature.CheckAttr("categoryOfRecommendedTrack", 2)) &&
                                                (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {280, -1.69, -8.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {280, -1.69, -8.78};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("orientationValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 14.040000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25020, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {279, -8.9, -2.5};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(18, 25020, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRecommendedTrafficLanePart(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {275, -3.45, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {292, -6.66, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25020, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {275, -3.45, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25020, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25020)) {
                SymbolParam param_symbol = {292, -6.66, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRescueStation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38030)) {
                SymbolParam param_symbol = {290, -2.67, -2.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 38030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRiver(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(6, 12420, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(12420)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 12420, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRoad(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SimpleLineParam param_simple_line = {0.640000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32250, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                ColourFillAreaParam param_color_fill = {191, 191, 143, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32250, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32250, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawRunway(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32240)) {
                SimpleLineParam param_simple_line = {0.960000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(18, 32240, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(15, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(15, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32240)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(15, 32240, param, idColourFillArea, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSandwave(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 24010, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SymbolParam param_symbol = {371, -5.96, -1.17};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 24010, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SymbolParam param_symbol = {371, -5.96, -1.17};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 24010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SymbolFillAreaParam param_symbol_fill = {370, 31.870000, 0.000000, 11.870000, 21.830000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 24010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 24010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SymbolFillAreaParam param_symbol_fill = {370, 31.870000, 0.000000, 11.870000, 21.830000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(12, 24010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 24010, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSeaAreaNamedWaterArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                std::string text;
                text = "SeaAreaNamedWaterArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 21060, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(21060)) {
                std::string text;
                text = "SeaAreaNamedWaterArea";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(9, 21060, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSeabedArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && ((feature.CheckAttr("waterLevelEffect", 4)) &&
                                         ((feature.CheckAttr("natureOfSurface", 11)) ||
                                          (feature.CheckAttr("natureOfSurface", 14)) ||
                                          (feature.CheckAttr("natureOfSurface", 9))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34010)) {
                SymbolFillAreaParam param_symbol_fill = {273, 15.470000, 0.000000, 0.000000, 13.380000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 34010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   (((feature.CheckAttr("waterLevelEffect", 3)) || (feature.CheckAttr("waterLevelEffect", 4))) &&
                    (feature.CheckAttrExists("natureOfSurface") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSeaplaneLandingArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {78, -2.72, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26040, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26040, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawShorelineConstruction(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (feature.CheckAttr("condition", 1) || feature.CheckAttr("condition", 2)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else if (feature.CheckAttr("categoryOfShorelineConstruction", 6) ||
                       feature.CheckAttr("categoryOfShorelineConstruction", 15) ||
                       feature.CheckAttr("categoryOfShorelineConstruction", 16)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else if (feature.CheckAttr("waterLevelEffect", 3) || feature.CheckAttr("waterLevelEffect", 4)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (feature.CheckAttr("condition", 1) || feature.CheckAttr("condition", 2)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else if (feature.CheckAttr("categoryOfShorelineConstruction", 6) ||
                       feature.CheckAttr("categoryOfShorelineConstruction", 15) ||
                       feature.CheckAttr("categoryOfShorelineConstruction", 16)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else if (feature.CheckAttr("waterLevelEffect", 3) || feature.CheckAttr("waterLevelEffect", 4)) {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            } else {
                if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                    SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                    param.m_SimpleLineParam = param_simple_line;
                    object_drawer->AddFunction(21, 12410, param, idDrawSimpleLine, index_feature);
                }
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(12410)) {
                SymbolParam param_symbol = {239, -1.76, -1.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(24, 12410, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSignalStationTraffic(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(28020)) {
                SymbolParam param_symbol = {368, -0.4, -0.4};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 28020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSignalStationWarning(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(28020)) {
                SymbolParam param_symbol = {368, -0.4, -0.4};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(21, 28020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSiloTank(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 22220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22220, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 32220, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32220, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfSiloTank", 1)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {367, -1.82, -1.82};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSiloTank", 2)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {508, -1.74, -1.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSiloTank", 3)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {543, -1.91, -5.95};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") &&
                   ((feature.CheckAttr("categoryOfSiloTank", 4)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {545, -1.66, -5.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSiloTank", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {366, -1.66, -1.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSiloTank", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {541, -1.89, -5.94};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfSiloTank", 4))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {542, -1.66, -5.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {508, -1.74, -1.73};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32220)) {
                SymbolParam param_symbol = {507, -1.58, -1.57};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 32220, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSlopeTopline(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") &&
            (((feature.CheckAttr("categoryOfSlope", 2)) || (feature.CheckAttr("categoryOfSlope", 6))) &&
             (feature.CheckAttrExists("radarConspicuous") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22210)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfSlope", 2)) || (feature.CheckAttr("categoryOfSlope", 6)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve") &&
                   ((feature.CheckAttr("categoryOfSlope", 6)) && (feature.CheckAttr("visuallyConspicuous", 1)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22210)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 22210, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32010, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(22220)) {
                SymbolParam param_symbol = {209, -5.24, -4.55};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 22220, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SymbolParam param_symbol = {208, -5.24, -4.55};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 32010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSlopingGround(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            (((feature.CheckAttr("categoryOfSlope", 1)) || (feature.CheckAttr("categoryOfSlope", 2)) ||
              (feature.CheckAttr("categoryOfSlope", 3)) || (feature.CheckAttr("categoryOfSlope", 4)) ||
              (feature.CheckAttr("categoryOfSlope", 5)) || (feature.CheckAttr("categoryOfSlope", 7))) &&
             (feature.CheckAttrExists("radarConspicuous") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                ColourFillAreaParam param_color_fill = {118, 140, 151, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 32010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfSlope", 6))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                ColourFillAreaParam param_color_fill = {118, 140, 151, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(9, 32010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32010)) {
                SymbolParam param_symbol = {208, -5.24, -4.55};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 32010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSmallCraftFacility(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38210)) {
                ColourFillAreaParam param_color_fill = {161, 150, 83, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 38210, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(38210)) {
                SymbolParam param_symbol = {369, -3.56, -3.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 38210, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(38210)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 38210, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(38210)) {
                SymbolParam param_symbol = {369, -3.56, -3.61};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 38210, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSoundingDatum(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSounding(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            double depth = 0.0;
            double depthval;
            if (depth > 31) {
                depthval = static_cast<int>(depth);
            } else if (0 > depth) {
                depthval = 0 - depth;
            } else {
                depthval = depth;
            }
            std::string prefix;
            if (depth > object_drawer->GetContext().GetSafetyDepth()) {
                prefix = "SOUNDG";
            } else {
                prefix = "SOUNDS";
            }
            if (10 > depth) {
                double digits = depthval * 10;
                if ((depthval - floor(depthval)) > 0) {
                    {
                        std::string symbol_name = "";
                        symbol_name += prefix;
                        symbol_name += "5";
                        std::stringstream ss;
                        ss << std::setprecision(5) << digits;
                        symbol_name += ss.str().substr(1, 1);
                        if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                            SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                        S101Symbols::Symbols()[symbol_name].OffsetX,
                                                        S101Symbols::Symbols()[symbol_name].OffsetY};
                            param.m_SymbolParam = param_symbol;
                            object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                        }
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            } else if (31 > depth && (depth - floor(depth)) > 0) {
                double digits = depthval * 10;
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "2";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "5";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(2, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "2";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "5";
                    std::stringstream ss;
                    ss << std::setprecision(5) << digits;
                    symbol_name += ss.str().substr(2, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            } else if (100 > depth) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "0";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            } else if (1000 > depth) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "2";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "0";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(2, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            } else if (10000 > depth) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "2";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "0";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(2, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "4";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(3, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            } else {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "3";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(0, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "2";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(1, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "1";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(2, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "0";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(3, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "4";
                    std::stringstream ss;
                    ss << std::setprecision(5) << depthval;
                    symbol_name += ss.str().substr(4, 1);
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            }
            if (feature.CheckAttrExists("TECSOU") &&
                (feature.CheckAttr("TECSOU", 4) || feature.CheckAttr("TECSOU", 6))) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "B1";
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            }
            if ((feature.CheckAttrExists("QUASOU") &&
                 (feature.CheckAttr("QUASOU", 3) || feature.CheckAttr("QUASOU", 4) || feature.CheckAttr("QUASOU", 5) ||
                  feature.CheckAttr("QUASOU", 8) || feature.CheckAttr("QUASOU", 9))) ||
                feature.CheckAttr("STATUS", 18) || (feature.CheckAttrExists("QUAPOS") &&
                                                    !(feature.CheckAttr("QUAPOS", 1) ||
                                                      feature.CheckAttr("QUAPOS", 10) ||
                                                      feature.CheckAttr("QUAPOS", 11)))) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "C2";
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            }
            if (0 > depth) {
                {
                    std::string symbol_name = "";
                    symbol_name += prefix;
                    symbol_name += "A1";
                    if (!object_drawer->GetContext().CheckViewingGroup(33010)) {
                        SymbolParam param_symbol = {S101Symbols::Symbols()[symbol_name].NumSymbol,
                                                    S101Symbols::Symbols()[symbol_name].OffsetX,
                                                    S101Symbols::Symbols()[symbol_name].OffsetY};
                        param.m_SymbolParam = param_symbol;
                        object_drawer->AddFunction(18, 33010, param, idDrawSymbol, index_feature);
                    }
                }
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSpring(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34020)) {
                SymbolParam param_symbol = {497, -1.98, -3.98};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawStraightTerritorialSeaBaseline(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 36050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSubmarinePipelineArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {79, -2.51, -2.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfPipelinePipe", 2)) || (feature.CheckAttr("categoryOfPipelinePipe", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34030, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("product", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34030, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SimpleLineParam param_simple_line = {0.640000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34030, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfPipelinePipe", 2)) || (feature.CheckAttr("categoryOfPipelinePipe", 3)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {133, 164, 133, 133};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.820000, -0.530000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 32.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 34030, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("product", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {133, 164, 133, 133};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.820000, -0.530000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 32.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 34030, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {214, -0.32, -2.87};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                double dashes[6] = {2.000000, 6.000000, 18.200000, 6.000000, 26.200000, 6.000000};
                int symbols[4] = {134, 163, 134, 134};
                double symbols_position[4] = {5.000000, 13.100000, 21.200000, 29.300000};
                double symbol_offset[8] = {-1.800000, -0.160000, -2.820000, -0.430000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 32.300000, 0.000000, dashes, 6, symbols,
                                                        symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(9, 34030, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34030)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSubmarineTransitLane(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SimpleLineParam param_simple_line = {0.320000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 26040, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {90, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 26040, param, idDrawComplexlLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(26040)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 26040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawSweptArea(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                SymbolParam param_symbol = {498, -6.08, -3.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 23030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("depthRangeMinimumValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "swept to " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 23030, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 23030, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                SymbolParam param_symbol = {498, -6.08, -3.56};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 23030, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("depthRangeMinimumValue", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                text = "swept to " + text;
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, -3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 23030, param, idDrawText, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(23030)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 23030, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTerritorialSeaArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 36050, param, idDrawSimpleLine, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(36050)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(6, 36050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTidalStreamFloodEbb(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfTidalStream", 1)) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {186, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfTidalStream", 2)) &&
                                                (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {126, -1.17, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && ((feature.CheckAttr("categoryOfTidalStream", 3)) &&
                                                (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {93, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfTidalStream", 1)) && (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {186, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfTidalStream", 2)) &&
                                              (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {126, -1.17, -5.35};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point") && ((feature.CheckAttr("categoryOfTidalStream", 3)) &&
                                              (feature.CheckAttrExists("orientationValue") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {93, -1.17, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("velocityMaximum", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 3.510000, 3.510000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(12, 33060, param, idDrawText, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {92, -5.04, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {92, -5.04, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(6, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 33060, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {92, -5.04, -4.64};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(6, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                double dashes[6] = {2.000000, 6.000000, 19.200000, 6.000000, 27.300000, 6.000000};
                int symbols[4] = {133, 176, 133, 133};
                double symbols_position[4] = {5.000000, 13.600000, 22.200000, 29.800000};
                double symbol_offset[8] = {-1.800000, -0.160000, -4.120000, -1.840000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 33.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(6, 33060, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTidalStreamPanelData(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {503, -2.96, -2.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33060, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {503, -2.96, -2.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(6, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(6, 33060, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                SymbolParam param_symbol = {503, -2.96, -2.97};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(6, 33060, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33060)) {
                double dashes[6] = {2.000000, 6.000000, 19.200000, 6.000000, 27.300000, 6.000000};
                int symbols[4] = {133, 176, 133, 133};
                double symbols_position[4] = {5.000000, 13.600000, 22.200000, 29.800000};
                double symbol_offset[8] = {-1.800000, -0.160000, -4.120000, -1.840000, -1.800000, -0.160000, -1.800000,
                                           -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 33.300000, 0.000000, dashes, 6,
                                                        symbols, symbols_position, 4, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(6, 33060, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTideway(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32070)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32070, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32070)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(21, 32070, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32070)) {
                std::string text;
                text = "Tideway";
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 0.000000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(21, 32070, param, idDrawText, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationLine(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {1.920000, 203, 169, 250, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(24, 25010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationSchemeBoundary(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {1.280000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(21, 25010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationSchemeCrossing(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolFillAreaParam param_symbol_fill = {551, 5.000000, 0.000000, 0.000000, 5.000000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(18, 25010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {550, -18.49, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationSchemeLanePart(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("orientationValue") > 0)) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {552, -3.16, -7.66};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {89, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("text", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25010, param, idDrawText, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolFillAreaParam param_symbol_fill = {551, 5.000000, 0.000000, 0.000000, 5.000000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(18, 25010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {89, -18.33, -0.48};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                std::string text;
                double attr = 0.0;
                feature.GetRealAttrByID("text", &attr);
                std::stringstream ss;
                ss << static_cast<int>(attr);
                text = ss.str();
                TextParam param_text = {text.c_str(), "sans", 76, 91, 99, 255, 10, 1, 1, 0.000000, 7.020000};
                param.m_TextParam = param_text;
                object_drawer->AddFunction(18, 25010, param, idDrawText, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationSchemeRoundabout(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {553, -4.79, -4.89};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolFillAreaParam param_symbol_fill = {551, 5.000000, 0.000000, 0.000000, 5.000000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(18, 25010, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {553, -4.79, -4.89};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
            std::string centreSymbol;
            if (feature.CheckAttr("restriction", 7) || feature.CheckAttr("restriction", 8) ||
                feature.CheckAttr("restriction", 14)) {
                double restriction = 0.0;
                feature.GetRealAttrByID("restriction", &restriction);
                if (7 > restriction || feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ENTRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ENTRES71";
                } else {
                    centreSymbol = "ENTRES51";
                }
            } else if (feature.CheckAttr("restriction", 1) || feature.CheckAttr("restriction", 2)) {
                if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                    feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                    feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 24) || feature.CheckAttr("restriction", 25) ||
                    feature.CheckAttr("restriction", 26) || feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "ACHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "ACHRES71";
                } else {
                    centreSymbol = "ACHRES51";
                }
            } else if (feature.CheckAttr("restriction", 3) || feature.CheckAttr("restriction", 4) ||
                       feature.CheckAttr("restriction", 5) || feature.CheckAttr("restriction", 6) ||
                       feature.CheckAttr("restriction", 24)) {
                if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                    feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                    feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                    feature.CheckAttr("restriction", 27)) {
                    centreSymbol = "FSHRES61";
                } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                           feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                           feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                           feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                           feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "FSHRES71";
                } else {
                    centreSymbol = "FSHRES51";
                }
            } else if (feature.CheckAttr("restriction", 13) || feature.CheckAttr("restriction", 16) ||
                       feature.CheckAttr("restriction", 17) || feature.CheckAttr("restriction", 23) ||
                       feature.CheckAttr("restriction", 25) || feature.CheckAttr("restriction", 26) ||
                       feature.CheckAttr("restriction", 27)) {
                if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                    feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                    feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                    feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                    feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                    centreSymbol = "CTYARE71";
                } else {
                    centreSymbol = "CTYARE51";
                }
            } else if (feature.CheckAttr("restriction", 9) || feature.CheckAttr("restriction", 10) ||
                       feature.CheckAttr("restriction", 11) || feature.CheckAttr("restriction", 12) ||
                       feature.CheckAttr("restriction", 15) || feature.CheckAttr("restriction", 18) ||
                       feature.CheckAttr("restriction", 19) || feature.CheckAttr("restriction", 20) ||
                       feature.CheckAttr("restriction", 21) || feature.CheckAttr("restriction", 22)) {
                centreSymbol = "INFARE51";
            } else {
                centreSymbol = "RSRDEF51";
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {S101Symbols::Symbols()[centreSymbol].NumSymbol,
                                            S101Symbols::Symbols()[centreSymbol].OffsetX,
                                            S101Symbols::Symbols()[centreSymbol].OffsetY};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(18, 25010, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTrafficSeparationZone(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                ColourFillAreaParam param_color_fill = {203, 169, 250, 191};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 25010, param, idColourFillArea, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTunnel(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("buriedDepth", 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SimpleLineParam param_simple_line = {0.640000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 24010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32250, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") && (feature.CheckAttr("buriedDepth", 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                ColourFillAreaParam param_color_fill = {97, 184, 255, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(12, 24010, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(24010)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 24010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32250)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 32250, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawTwoWayRoutePart(IObjectDrawer *object_drawer, int index_feature) {
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {556, -3.45, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {1.280000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {555, -3.59, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {1.280000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {554, -7.37, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SimpleLineParam param_simple_line = {1.280000, 192, 69, 209, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 25010, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && ((feature.CheckAttrExists("orientationValue") > 0) &&
                                         ((feature.CheckAttr("trafficFlow", 1)) ||
                                          (feature.CheckAttr("trafficFlow", 2)) ||
                                          (feature.CheckAttr("trafficFlow", 3))))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {556, -3.45, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") &&
                   ((feature.CheckAttrExists("orientationValue") > 0) && (feature.CheckAttr("trafficFlow", 4)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {555, -3.59, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                SymbolParam param_symbol = {554, -7.37, -7.42};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 25010, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(25010)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {134};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 192, 69, 209, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 25010, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawUnsurveyedArea(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(11050)) {
                ColourFillAreaParam param_color_fill = {147, 174, 187, 255};
                param.m_ColourFillAreaParam = param_color_fill;
                object_drawer->AddFunction(3, 11050, param, idColourFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(11050)) {
                SymbolFillAreaParam param_symbol_fill = {244, 7.020000, 0.000000, 6.020000, 4.960000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(3, 11050, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(11050)) {
                SimpleLineParam param_simple_line = {0.640000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(3, 11050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawVegetation(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32030, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfVegetation", 7)) || (feature.CheckAttr("categoryOfVegetation", 21)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SymbolFillAreaParam param_symbol_fill = {560, 14.000000, 0.000000, 4.000000, 13.000000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 32030, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32030, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SymbolFillAreaParam param_symbol_fill = {559, 13.620000, 0.000000, 3.620000, 13.990000};
                param.m_SymbolFillAreaParam = param_symbol_fill;
                object_drawer->AddFunction(9, 32030, param, idSymbolFillArea, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SimpleLineParam param_simple_line = {0.320000, 141, 100, 46, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32030, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfVegetation", 21)) || (feature.CheckAttr("categoryOfVegetation", 7)))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SymbolParam param_symbol = {548, -2.16, -3.16};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 32030, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32030)) {
                SymbolParam param_symbol = {547, -1.92, -4.17};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 32030, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawWaterTurbulence(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33040)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 33040, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33040)) {
                SymbolParam param_symbol = {561, -8.66, -1.65};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33040, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33040)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 33040, param, idDrawSimpleLine, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(33040)) {
                SymbolParam param_symbol = {561, -8.66, -1.65};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 33040, param, idDrawSymbol, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(33040)) {
                SymbolParam param_symbol = {561, -8.66, -1.65};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 33040, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawWaterfall(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Curve") && (feature.CheckAttr("visuallyConspicuous", 1))) {
            if (!object_drawer->GetContext().CheckViewingGroup(32050)) {
                SimpleLineParam param_simple_line = {0.960000, 201, 237, 255, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32050, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Curve")) {
            if (!object_drawer->GetContext().CheckViewingGroup(32050)) {
                SimpleLineParam param_simple_line = {0.960000, 118, 140, 151, 0.000000, 0.000000, 0.000000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 32050, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawWeedKelp(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34020)) {
                SymbolParam param_symbol = {562, -5.16, -1.41};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34020, param, idDrawSymbol, index_feature);
            }
            if (!object_drawer->GetContext().CheckViewingGroup(34020)) {
                SimpleLineParam param_simple_line = {0.320000, 118, 140, 151, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(9, 34020, param, idDrawSimpleLine, index_feature);
            }
        }
        if (!strcmp(temp, "Point")) {
            if (!object_drawer->GetContext().CheckViewingGroup(34020)) {
                SymbolParam param_symbol = {562, -5.16, -1.41};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(9, 34020, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    (void) object_drawer;
    (void) index_feature;
}

void DrawWreck(IObjectDrawer *object_drawer, int index_feature) {
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Point") &&
            ((feature.CheckAttr("categoryOfWreck", 3)) && (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34051, param, idDrawSymbol, index_feature);
            }
        } else if (!strcmp(temp, "Point") && (feature.CheckAttr("categoryOfWreck", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SymbolParam param_symbol = {193, -2.17, -1.7};
                param.m_SymbolParam = param_symbol;
                object_drawer->AddFunction(12, 34050, param, idDrawSymbol, index_feature);
            }
        }
        (void) param;
    }
    if (!object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfWreck", 3)) && (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34051, param, idDrawSimpleLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfWreck", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                SimpleLineParam param_simple_line = {0.320000, 76, 91, 99, 5.400000, 0.000000, 3.600000};
                param.m_SimpleLineParam = param_simple_line;
                object_drawer->AddFunction(12, 34050, param, idDrawSimpleLine, index_feature);
            }
        }
        (void) param;
    }
    if (object_drawer->GetContext().IsSymbolizedAreas()) {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") &&
            ((feature.CheckAttr("categoryOfWreck", 3)) && (feature.CheckAttrExists("valueOfSounding") > 0))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34051)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34051, param, idDrawComplexlLine, index_feature);
            }
        } else if (!strcmp(temp, "Surface") && (feature.CheckAttr("categoryOfWreck", 3))) {
            if (!object_drawer->GetContext().CheckViewingGroup(34050)) {
                double dashes[2] = {1.000000, 6.000000};
                int symbols[1] = {133};
                double symbols_position[1] = {4.000000};
                double symbol_offset[2] = {-1.800000, -0.160000};
                ComplexlLineParam param_complex_line = {0.320000, 118, 140, 151, 8.600000, 0.000000, dashes, 2, symbols,
                                                        symbols_position, 1, symbol_offset};
                param.m_ComplexlLineParam = param_complex_line;
                object_drawer->AddFunction(12, 34050, param, idDrawComplexlLine, index_feature);
            }
        }
        (void) param;
    }
    {
        char temp[64];
        S101ObjectDrawerParam param = {};
        const IFeature &feature = object_drawer->GetFeature(index_feature);
        feature.GetPermittedPrimitives(temp, 64);
        if (!strcmp(temp, "Surface") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
        } else if (!strcmp(temp, "Surface")) {
        }
        if (!strcmp(temp, "Point") && (feature.CheckAttrExists("valueOfSounding") > 0)) {
        } else if (!strcmp(temp, "Point")) {
        }
        (void) param;
    }
    (void) index_feature;
    (void) object_drawer;
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
